// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    partial class PostgresDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Ability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsHealing")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("Domain.Entities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Armor")
                        .HasColumnType("integer");

                    b.Property<Guid>("CharacteristicsSetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SkillSetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Temperament")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicsSetId");

                    b.HasIndex("SkillSetId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Domain.Entities.CharacteristicsSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Agility")
                        .HasColumnType("integer");

                    b.Property<int>("Charisma")
                        .HasColumnType("integer");

                    b.Property<int>("Endurance")
                        .HasColumnType("integer");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CharacteristicsSets");
                });

            modelBuilder.Entity("Domain.Entities.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Armor")
                        .HasColumnType("integer");

                    b.Property<Guid>("CharacteristicsSetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<int>("Hostility")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicsSetId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("Domain.Entities.InventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Acrobatics")
                        .HasColumnType("integer");

                    b.Property<int>("AnimalHandling")
                        .HasColumnType("integer");

                    b.Property<int>("Arcana")
                        .HasColumnType("integer");

                    b.Property<int>("Athletics")
                        .HasColumnType("integer");

                    b.Property<int>("Deception")
                        .HasColumnType("integer");

                    b.Property<int>("History")
                        .HasColumnType("integer");

                    b.Property<int>("Insight")
                        .HasColumnType("integer");

                    b.Property<int>("Intimidation")
                        .HasColumnType("integer");

                    b.Property<int>("Investigation")
                        .HasColumnType("integer");

                    b.Property<int>("Medicine")
                        .HasColumnType("integer");

                    b.Property<int>("Nature")
                        .HasColumnType("integer");

                    b.Property<int>("Perception")
                        .HasColumnType("integer");

                    b.Property<int>("Performance")
                        .HasColumnType("integer");

                    b.Property<int>("Persuasion")
                        .HasColumnType("integer");

                    b.Property<int>("Religion")
                        .HasColumnType("integer");

                    b.Property<int>("SleightOfHands")
                        .HasColumnType("integer");

                    b.Property<int>("Stealth")
                        .HasColumnType("integer");

                    b.Property<int>("Survival")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SkillSets");
                });

            modelBuilder.Entity("Domain.Entities.Ability", b =>
                {
                    b.HasOne("Domain.Entities.Character", null)
                        .WithMany("Abilities")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Character", b =>
                {
                    b.HasOne("Domain.Entities.CharacteristicsSet", "CharacteristicsSet")
                        .WithMany()
                        .HasForeignKey("CharacteristicsSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SkillSet", "SkillSetModel")
                        .WithMany()
                        .HasForeignKey("SkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacteristicsSet");

                    b.Navigation("SkillSetModel");
                });

            modelBuilder.Entity("Domain.Entities.Creature", b =>
                {
                    b.HasOne("Domain.Entities.CharacteristicsSet", "CharacteristicsSet")
                        .WithMany()
                        .HasForeignKey("CharacteristicsSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacteristicsSet");
                });

            modelBuilder.Entity("Domain.Entities.InventoryItem", b =>
                {
                    b.HasOne("Domain.Entities.Character", null)
                        .WithMany("InventoryItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Character", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("InventoryItems");
                });
#pragma warning restore 612, 618
        }
    }
}
